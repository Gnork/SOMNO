#!/bin/bash
#
# Author: Christoph Jansen, SOMNO.Netz + ER-flow collaboration
#
# Requirements to run this script:
# Environment variable MATLAB_HOME must be defined
# Environment variable XNAT_CERT should be defined for secure connections
# Input parameters for XNAT download and upload must be given if DOWNLOAD_FILES or UPLOAD_FILES is true
#

#########################
#                       #
#       VARIABLES       #
#                       #
#########################

# INTERNAL_FILENAME must match the naming convention of the workflow configuration
readonly INTERNAL_FILENAME="ecg"

# INPUT_FILES array must specify the required files to execute the algorithm
readonly INPUT_FILES=(".hea" ".dat")

# OUTPUT_FILES array must specify the output files produced by the algorithm
readonly OUTPUT_FILES=("_fd1.dat" "_af2.dat" "_df2.dat")

# DOWNLOAD_FILES specifies if input files should be downloaded from XNAT or if they are uploaded by the workflow system
readonly DOWNLOAD_FILES="true"

# UPLOAD_FILES specifies if output files should be uploaded to XNAT
readonly UPLOAD_FILES="false"

# VERSION of the algorithm
readonly VERSION=1

# PARAMETERS_FILE is used to read XNAT parameters if not given via CLI
readonly PARAMETERS_FILE="parameters.txt"

#########################
#                       #
#       FUNCTIONS       #
#                       #
#########################

# echo error message to STDERR and abort script
err() {
	echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
	exit 1
}

# create session directory for temporary file operations
create_session_dir() {
	session_dir="${work_dir}/${project}_${subject}_${session}"
	[[ -d ${session_dir} ]] && rm -r ${session_dir}
	mkdir ${session_dir}	
	cd ${session_dir}
}

# download files from XNAT
download() {
	# check if parameters are valid
	if [[ is_valid == "false" ]]; then
		err "One or more parameters are missing. Could not download files from XNAT."
	fi
	# create session directory
	create_session_dir
	
	# download scan info
	scan_info_format="scans?format=csv"
	scan_info_file="scans.info"
	scan_info_url="${host}/REST/projects/${project}/subjects/${subject}/experiments/${session}/${scan_info_format}"

	curl ${cert_option} -O -u ${user}:${pwd} "${scan_info_url}"
	sed 1d ${scan_info_format} > ${scan_info_file}
	
	if [[ $(cat ${scan_info_file} | wc -l) -lt 1 ]]; then
		err "No scans to download from XNAT for project: ${project}, subject: ${subject}, session: ${session}"
	fi

	# process scan info
	for row in $(cat ${scan_info_file}); do
		scan=$(echo ${row} | awk 'BEGIN {FS="," }{print $2}' | sed 's/"//; s/"//')
		scans="${scans}${scan},"
	done
	
	scans=$(echo ${scans%?})

	# download files
	scan_file_url="${host}/REST/projects/${project}/subjects/${subject}/experiments/${session}/scans/${scans}/resources/OTHER/files?format=zip"
	curl ${cert_option} -O -u ${user}:${pwd} "${scan_file_url}"
	unzip files?format=zip
	rm files?format=zip
	
	# rename input files to match INTERNAL_FILENAME conventions
	scan_file_paths=$(find "${session_dir}" -type f -name "*")

	for extension in "${INPUT_FILES[@]}"; do
		scan_file_paths=$(echo ${scan_file_paths} | grep ${extension})
		if [[ -z ${scan_file_paths} ]]; then
			err "Required input file ${extension} is missing in downloaded files"
		fi
		
		# prepare extension for regex
		regex_extension=$(echo ${extension} | sed 's/\./\\\./g')

		# use regex to extract the file path from the string
		regex_for_scan=" ([^ ]*${regex_extension}) "
		[[ $scan_file_paths =~ $regex_for_scan ]]
		scan=${BASH_REMATCH[1]}

		mv ${scan} ${work_dir}/"${INTERNAL_FILENAME}${extension}"
	done
	
	cd ${work_dir}
}

# upload files to XNAT and do not overwrite any old results using timestamp
upload() {
	# check if parameters are valid
	if [[ is_valid == "false" ]]; then
		err "One or more parameters are missing. Could not upload files to XNAT."
	fi
	for extension in "${OUTPUT_FILES[@]}"; do
		assessor_extension_name=$(echo ${extension} | sed 's/\.//g')
		assessor_name="${name_of_algorithm}_${timestamp}${assessor_extension_name}"
		assessor_url="${host}/REST/projects/${project}/subjects/${subject}/experiments/${session}/assessors/${assessor_name}?xsiType=xnat:imageAssessorData"

		curl ${cert_option} -X PUT -u $user:$pwd "${assessor_url}"
		
		assessor_file_name=${INTERNAL_FILENAME}${extension}
		assessor_file_url="${host}/REST/projects/${project}/subjects/${subject}/experiments/${session}/assessors/${assessor_name}/resources/DICOM/files/${assessor_file_name}"
		
		curl ${cert_option} -X PUT -u ${user}:${pwd} "${assessor_file_url}?format=OTHER&content=T1_RAW&inbody=true" --data-binary @${assessor_file_name}
	done
}

# upload files to XNAT and overwrite existing results with same label
upload_overwrite() {
	# check if parameters are valid
	if [[ is_valid == "false" ]]; then
		err "One or more parameters are missing. Could not upload files to XNAT."
	fi

	# create session directory
	create_session_dir

	# upload files
	for extension in "${OUTPUT_FILES[@]}"; do
		assessor_extension_name=$(echo ${extension} | sed 's/\.//g')
		assessor_name="${name_of_algorithm}_v${VERSION}${assessor_extension_name}"
		assessor_url="${host}/REST/projects/${project}/subjects/${subject}/experiments/${session}"

		# check if assessor already exists
		assessor_info_format="assessors?format=csv"

		curl ${cert_option} -O -u ${user}:${pwd} "${assessor_url}/${assessor_info_format}"
		existing_assessor=$(cat ${assessor_info_format} | grep ${assessor_name})

		rm ${assessor_info_format}
		
		if [[ -z ${existing_assessor} ]]; then
			# create new assessor
			curl ${cert_option} -X PUT -u $user:$pwd "${assessor_url}/assessors/${assessor_name}?xsiType=xnat:imageAssessorData"
		else
			# if assessor already exists delete all files stored in assessor
			assessor_files_format="files?format=csv"
			assessor_file="${assessor_name}.info"
			curl ${cert_option} -O -u ${user}:${pwd} "${assessor_url}/assessors/${assessor_name}/${assessor_files_format}"
			sed 1d ${assessor_files_format} > ${assessor_file}
			rm ${assessor_files_format}
			
			for row in $(cat ${assessor_file}); do
				file_to_delete=$(echo ${row} | awk '{print $3}' | sed 's/"//; s/"//')
				curl ${cert_option} -X DELETE -u ${user}:${pwd} "${host}${file_to_delete}"
			done
		fi

		# upload file to assessor
		assessor_file_name=${INTERNAL_FILENAME}${extension}
		assessor_file_url="${host}/REST/projects/${project}/subjects/${subject}/experiments/${session}/assessors/${assessor_name}/resources/DICOM/files/${assessor_file_name}"
		
		curl ${cert_option} -X PUT -u ${user}:${pwd} "${assessor_file_url}?format=OTHER&content=T1_RAW&inbody=true" --data-binary @"${work_dir}/${assessor_file_name}"
	done

	cd ${work_dir}
}

# validate input parameters
validate() {
	if [[ -z ${session} ]] || [[ -z ${subject} ]] || [[ -z ${project} ]] || [[ -z ${host} ]] || [[ -z ${user} ]] || [[ -z ${pwd} ]]; then
		return 1
	fi
	return 0
}

# read parameters from PARAMETERS_FILE
read_parameters() {
	if [[ -z ${PARAMETERS_FILE} ]] || [[ ! -f ${PARAMETERS_FILE} ]]; then
		return 1
	fi

	xnat_id=$(cat ${PARAMETERS_FILE} | grep "xnatID" | awk '{print $2}')
	session=$(cat ${PARAMETERS_FILE} | grep "session" | awk '{print $2}')
	subject=$(cat ${PARAMETERS_FILE} | grep "subject" | awk '{print $2}')
	project=$(cat ${PARAMETERS_FILE} | grep "project" | awk '{print $2}')
	host=$(cat ${PARAMETERS_FILE} | grep "host" | awk '{print $2}')
	user=$(cat ${PARAMETERS_FILE} | grep "user" | awk '{print $2}')
	pwd=$(cat ${PARAMETERS_FILE} | grep "pwd" | awk '{print $2}')
	timestamp=$(cat ${PARAMETERS_FILE} | grep "timestamp" | awk '{print $2}')

	if ! validate; then
		return 1
	fi
	
	return 0
}

# write valid parameters to PARAMETERS_FILE. this file can be used by the following job if specified in the workflow
write_parameters() {
	if validate && [[ ! -z ${PARAMETERS_FILE} ]]; then
		echo "xnatID ${xnat_id}" > ${PARAMETERS_FILE}
		echo "session ${session}" >> ${PARAMETERS_FILE}
		echo "subject ${subject}" >> ${PARAMETERS_FILE}
		echo "project ${project}" >> ${PARAMETERS_FILE}
		echo "host ${host}" >> ${PARAMETERS_FILE}
		echo "user ${user}" >> ${PARAMETERS_FILE}
		echo "pwd ${pwd}" >> ${PARAMETERS_FILE}
		echo "timestamp ${timestamp}" >> ${PARAMETERS_FILE}
	fi
}

#########################
#                       #
#       PROCESSING      #
#                       #
#########################

# parse input parameters
while [[ $# -gt 1 ]]
do
	case $1 in
	-xnatID)
	xnat_id=$2
	shift 2
	;;
	-session)
	session=$2
	shift 2
	;;
	-subject)
	subject=$2
	shift 2
	;;
	-project)
	project=$2
	shift 2
	;;
	-host)
	host=$2
	shift 2
	;;
	-user)
	user=$2
	shift 2
	;;
	-pwd)
	pwd=$2
	shift 2
	;;
	*)
	echo "Unknown argument $1"
	shift 2
	;;
	esac
done

work_dir=$(pwd)

# validate input parameters
is_valid="true"

if ! validate; then
	if ! read_parameters; then
		is_valid="false"
	fi
fi

if [[ -z ${timestamp} ]]; then
	timestamp=$(date "+%s")
fi

# validate required global and environment variables
if [[ -z ${MATLAB_HOME} ]]; then
	err "Environment variable MATLAB_HOME is missing"
fi

if [[ ! -d ${MATLAB_HOME} ]]; then
	err "Environment variable MATLAB_HOME is not pointing to a directory"
fi

if [[ -z ${INTERNAL_FILENAME} ]]; then
	err "Global variable INTERNAL_FILENAME is missing"
fi

# check if certificate XNAT_CERT exists
cert_option="-k"

if [[ ! -z ${XNAT_CERT} ]] && [[ -f ${XNAT_CERT} ]]; then
	cert_option="--cacert ${XNAT_CERT}"
else
	echo "Using insecure certificate option -k for curl"
fi

# find execution scripts in the application folder
path_of_algorithm=$(find . -name "run_*.sh")
number_of_algorithms=$(echo ${path_of_algorithm} | wc -w)

if [[ ${number_of_algorithms} -lt 1 ]]; then
	err "There is no run script in the application folder"
fi

if [[ ${number_of_algorithms} -gt 1 ]]; then
	err "There are ${number_of_algorithms} algorithms to choose from in the application folder"
fi

# extract name of algorithm using regex
regex_for_algorithm="run_(.*)\.sh"
[[ $path_of_algorithm =~ $regex_for_algorithm ]]
name_of_algorithm=${BASH_REMATCH[1]}

if [[ -z ${name_of_algorithm} ]]; then
	err "Regex did not match any execution script"
fi

if [[ ! -f ${name_of_algorithm} ]]; then
	err "Executable for algorithm ${name_of_algorithm} does not exist"
fi

# download files from XNAT
if [[ ! -z ${DOWNLOAD_FILES} ]] && [[ ${DOWNLOAD_FILES} == "true" ]] && [[ ! -z ${INPUT_FILES} ]] && [[ ${#INPUT_FILES[@]} -gt 0 ]]; then
	download
fi

# check if required input files exist
if [[ ! -z ${INPUT_FILES} ]] && [[ ${#INPUT_FILES[@]} -gt 0 ]]; then
	for extension in "${INPUT_FILES[@]}"; do
		if [[ ! -f "${INTERNAL_FILENAME}${extension}" ]]; then
			err "Required input file ${INTERNAL_FILENAME}${extension} is missing"	
		fi
	done
fi

# set execution permissions for algorithm files
chmod +x run_${name_of_algorithm}.sh
chmod +x ${name_of_algorithm}

# execute matlab algorithm
./run_${name_of_algorithm}.sh $MATLAB_HOME ${INTERNAL_FILENAME}

# check if output files have been created
if [[ ! -z ${OUTPUT_FILES} ]] && [[ ${#OUTPUT_FILES[@]} -gt 0 ]]; then
	for extension in "${OUTPUT_FILES[@]}"; do
		if [[ ! -f "${INTERNAL_FILENAME}${extension}" ]]; then
			err "Output file ${INTERNAL_FILENAME}${extension} is missing"
		fi
	done
fi

# check if file upload is required
if [[ ! -z ${UPLOAD_FILES} ]] && [[ ${UPLOAD_FILES} == "true" ]]; then
	upload_overwrite
fi

# write parameters to file
write_parameters
